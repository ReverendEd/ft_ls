bool backtracking(t_board *board, int output_pieces[26], int start, int end, int i) // all start at end #
{
	if (start == end)								 // if the pieces we are swapping end up being the same one and we have gone through the entire list, return false
		return false;								 // base case failure
	if (place_all_pieces(board, output_pieces, end)) // here we test the new piece combination. if it succeeds we pass true back up the chain
	{						// base case success
		print_board(board);
		return true;
	}
	clear_board(board); // reset board after test
	while (i < end)		// iterate through remaining pieces in list
	{
		if (backtracking(board, output_pieces, start + 1, end, start + 2)) // move to the next piece and test later combinations
			return true;												   // find a successful combination and pass it up the chain
		swap(output_pieces, start, i);									   //no successful combination, swap the next piece in the list with the current one
		i++;
	}
	return false; // if we are at the end of the list, return false
}